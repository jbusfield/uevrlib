local uevrUtils = require("libs/uevr_utils")
uevrUtils.setLogLevel(LogLevel.Debug)
local reticule = require("libs/reticule")
reticule.setLogLevel(LogLevel.Debug)
local configui = require("libs/configui")
local flickerFixer = require("libs/flicker_fixer")
	

local configDefinition = {
	{
		panelLabel = "Reticule Config", 
		saveFile = "config_hogwarts", 
		layout = 
		{
			{
				widgetType = "checkbox",
				id = "useReticule",
				label = "Use reticule",
				initialValue = useReticule
			},
			{
				widgetType = "combo",
				id = "reticuleStyle",
				selections = {"Default", "Create from mesh name", "Create from mesh", "Create from widget name", "Create from widget"},
				label = "Style",
				initialValue = 1
			},
			-- {
				-- widgetType = "checkbox",
				-- id = "reticuleOriginType",
				-- label = "Type",
				-- initialValue = true
			-- },
			{
				widgetType = "slider_int",
				id = "reticuleDistance",
				label = "Distance",
				speed = 1.0,
				range = {0, 1000},
				initialValue = 200
			},
			{
				widgetType = "slider_float",
				id = "reticuleScale",
				label = "Scale",
				speed = 0.1,
				range = {0.1, 5.0},
				initialValue = 1.0
			},
			{
				widgetType = "drag_float3",
				id = "reticuleRotation",
				label = "Rotation",
				speed = 1,
				range = {0, 360},
				initialValue = {0.0, 0.0, 0.0}
			},
			{
				widgetType = "end_rect",
				additionalSize = 12,
				rounding = 5
			}
		}
	}
}

configui.create(configDefinition)	

configui.onUpdate("reticuleStyle", function(value)
	createReticule(value)
end)
	
function on_pre_engine_tick(engine, delta)
	reticule.update(nil, nil, nil, nil, configui.getValue("reticuleDistance"), {configui.getValue("reticuleScale"),configui.getValue("reticuleScale"),configui.getValue("reticuleScale")},configui.getValue("reticuleRotation"))
end

function on_level_change(level)
	flickerFixer.create()
end

function createReticule(reticuleType)
print(reticuleType)
	if reticuleType == 1 then
		reticule.create()
	elseif reticuleType == 2 then		
		local meshName = "StaticMesh /Engine/BasicShapes/Cube.Cube"
		local options = {
			materialName = "Material /Engine/EngineDebugMaterials/WireframeMaterial.WireframeMaterial",
			scale = {.03, .03, .03},
			rotation = {Pitch=0,Yaw=0,Roll=0}
		}
		reticule.createFromMesh(meshName, options )				
	elseif reticuleType == 3 then		
		local meshName = "StaticMesh /Engine/BasicShapes/Plane.Plane"
		local options = {
			materialName = "Material /Engine/EngineMaterials/Widget3DPassThrough.Widget3DPassThrough",
			scale = {.05, .05, .05},
			rotation = {Pitch=90,Yaw=0,Roll=0}
		}
		local mesh = uevrUtils.find_instance_of("Class /Script/Engine.StaticMesh", meshName) 
		if uevrUtils.getValid(mesh) ~= nil then
			reticule.createFromMesh(mesh, options )
		end			
	elseif reticuleType == 4 then					
		local options = {
			removeFromViewport = true,
			twoSided = true,
			drawSize = vector_2(600, 600),
			--position = {X=0.0, Y=0.0, Z=7.0}
		}
		local widgetName = "WidgetBlueprintGeneratedClass /Game/UI/HUD/Reticle/Reticle_BP.Reticle_BP_C" --The Outer Worlds
		reticule.createFromWidget(widgetName, options)					
	elseif reticuleType == 5 then					
		local options = {
			removeFromViewport = true,
			twoSided = true,
			--position = {X=0.0, Y=0.0, Z=7.0}
		}
		local className = "WidgetBlueprintGeneratedClass /Game/UI/HUD/Reticle/Reticle_BP.Reticle_BP_C" --The Outer Worlds
		local widget = uevrUtils.getActiveWidgetByClass(className)
		if uevrUtils.getValid(widget) ~= nil then
			reticule.createFromWidget(widget, options)
		end			
	end

end

setInterval(1000, function()
	if not reticule.exists() then
		createReticule(configui.getValue("reticuleStyle"))
	end
end)